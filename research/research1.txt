PPM -> Portable PixMap
PPM format 
	P3 //means color is in ascii
	col row
	max_color_code(255 example)
	255 0 0 -> 1 cell will be RGB triplets.

Monochrome -> Image contain only single color/color values.

Mulitple Objects in a functional way.
We have a hittable module, where we can create different types of 
hittable Objects.
Say we created 2 hittable objects and pushed to a hittable_list.
Then we can loop through each and call
Hittable.hit(hittable)
Hittable.hit_on_list(hittable_list)
	|> return {is_hit, hit_record}
hit_record = %{}

|> Write hit function, now for sphere only
|> Then write for hit_on_list

{is_hit, hit_record} -> currently only from one.
But now we iterate through the list and update the it. 

we have an accumulator map,
{is_hit, hit_record, closest_so_far}

tmp_record = %{time: nil, point_of_intersection: nil, normal: nil}
Enum.reduce(hittable_list, {false, tmp_record, t_max}, fn hittable, {is_hit, record, closest} ->
	case hit(hittable, ray) do
		{true, rec} -> 
		{false, _}
	end
)

